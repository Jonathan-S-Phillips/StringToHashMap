package com.StringToHashMap;

import java.util.HashMap;
import java.util.Iterator;

/**
 * An extended version of the HashMap Object which converts a String into a HashMap. The String needs
 * two distinct delimiters: a keyValuePairsDelimiter which separates the key/value pairs from each other,
 * and the keyValueDelimiter which separates each key and value. There are 2 constructors, one which takes in a 
 * String and uses any of "\r\n", "\r", "\n", ",", or ";" as the default keyValuePairsDelimiter, and either 
 * "=" or ":" as the default keyValueDelimiter. Any leading and trailing whitespace for both default delimiters
 * is included. The other constructor takes in a String along with a keyValuePairsDelimiter and 
 * keyValueDelimiter, which allows you to format the String with any delimiters you want. 
 * 
 * @author JPhillips
 * @version 9/20/15
 */
public class StringToHashMap extends HashMap<String, String> {

	/* Default serialVersionUID generated by Eclipse. */
	private static final long serialVersionUID = 8421854999330846295L;
	/* The delimiter separating each key/value pair. */
	private String keyValuePairsDelimiter;
	/* The delimiter separating each key/value. */
	private String keyValueDelimiter;
	
	/**
	 * Constructs a HashMap from the given string. The default keyValuePairsDelimiter can be one of
	 * "\r\n", "\r", "\n", ",", ";". The default keyValueDelimiter will match "=" or ":". Any leading
	 * and trailing whitespace will be included in the delimiters as well.
	 * 
	 * @param hashMapString The String to convert into a HashMap.
	 */
	public StringToHashMap(String hashMapString) {
		this.keyValuePairsDelimiter = "[\\s]*(\\r\\n|\\r|\\n|,|;)[\\s]*";
		this.keyValueDelimiter = "[\\s]*[=|:][\\s]*";
		this.stringToHashMap(hashMapString);
	}
	
	/**
	 * Constructs a HashMap from the given string, using the given line and key/value delimiters.
	 * 
	 * @param hashMapString The String to convert into a HashMap.
	 * @param keyValuePairsDelimiter The delimiter that separates each key/value pair.
	 * @param keyValueDelimiter The delimiter that separates keys from values.
	 */
	public StringToHashMap(String hashMapString, String keyValuePairsDelimiter, String keyValueDelimiter) {
		this.keyValuePairsDelimiter = keyValuePairsDelimiter;
		this.keyValueDelimiter = keyValueDelimiter;
		this.stringToHashMap(hashMapString);
	}
	
	/**
	 * Finds any pointer values in this HashMap and replaces the references with an actual value from 
	 * the HashMap if it exists. References are assumed to have "{{" and "}}" characters surrounding
	 * them and can have any number of "{{" and "}}" throughout them. References do not have to be defined
	 * in the HashMap. If the value is not defined, then it is kept as a reference.
	 *  
	 * @return The HashMap with pointers replaced with values if the values exist.
	 */
	public HashMap<String, String> findReferences() {
		Iterator<Entry<String, String>> iterator = this.entrySet().iterator();
		while(iterator.hasNext()) {
			Entry<String, String> keyValue = iterator.next();
			String key = keyValue.getKey();
			String value = keyValue.getValue();
			if(value.matches("\\{\\{[a-zA-Z{}]*\\}\\}")) {
				value = value.replaceAll("[{+]", "");
				value = value.replaceAll("[}+]", "");
				String newValue = this.get(value);
				if(newValue != null) {
					this.replace(key, newValue);
				}
			}
		}
		return this;
	}
	
	//---Private Helper Methods----------------------------------------------------------------
	
	/**
	 * Converts the given String into a HashMap.
	 * 
	 * @param hashMapString The String to convert into a HashMap.
	 * @return A HashMap based on the given String. 
	 */
	private void stringToHashMap(String hashMapString) {
		try {
			String[] keyValuePairs = hashMapString.split(this.keyValuePairsDelimiter);
			for(String keyValuePair:keyValuePairs) {
				String[] keyValue = keyValuePair.split(this.keyValueDelimiter);
				
				// If there are more than 2 keyValue elements in the Array, then the keyValuePair
				// was not split correctly, which is due to the input String containing a different 
				// key/value pair delimiter than the one defined.
				if(keyValue.length > 2) {
					throw new IllegalArgumentException("Error parsing key/value pairs. Check key/value pairs delimiter."); 
				}
				
				this.put(keyValue[0], keyValue[1]);
			}
		}
		// If an ArrayIndexOutOfBoundsException occurs, then there was an error trying to parse out
		// the value in a key/value pair.
		catch(ArrayIndexOutOfBoundsException e) {
			throw new IllegalArgumentException("Error parsing value in key/value pair. Check key/value pair delimiter in input String.");
		}
	}
}
